{"id":"node_modules/ramda/es/call.js","dependencies":[{"name":"/Users/chiragdev/Documents/Training/JS-Console/package.json","includedInParent":true,"mtime":1669619765108},{"name":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_curry1.js","loc":{"line":1,"column":20,"index":20},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/call.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_curry1.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig ((*... -> a), *...) -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(\n *        R.repeat(' '),\n *        R.join(''),\n *        R.replace(/^(?!$)/gm)\n *      );\n *\n *      const format = R.converge(\n *        R.call,\n *        [\n *          R.pipe(R.prop('indent'), indentN),\n *          R.prop('value')\n *        ]\n *      );\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\n\nvar call = /*#__PURE__*/\n(0, _curry.default)(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nvar _default = call;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":1,"column":44}},{"generated":{"line":9,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":25,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":26,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":27,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":28,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":29,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":30,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":31,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":32,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":33,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":34,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":35,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":36,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":37,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":38,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":4},"source":"node_modules/ramda/es/call.js","original":{"line":40,"column":4},"name":"call"},{"generated":{"line":47,"column":8},"source":"node_modules/ramda/es/call.js","original":{"line":40,"column":8}},{"generated":{"line":47,"column":11},"source":"node_modules/ramda/es/call.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":0}},{"generated":{"line":48,"column":4},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":0},"name":"_curry1"},{"generated":{"line":48,"column":18},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":7}},{"generated":{"line":48,"column":20},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":8}},{"generated":{"line":48,"column":29},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":17},"name":"call"},{"generated":{"line":48,"column":33},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":21}},{"generated":{"line":48,"column":34},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":22},"name":"fn"},{"generated":{"line":48,"column":36},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":24}},{"generated":{"line":48,"column":38},"source":"node_modules/ramda/es/call.js","original":{"line":42,"column":26}},{"generated":{"line":49,"column":2},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":2}},{"generated":{"line":49,"column":9},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":9},"name":"fn"},{"generated":{"line":49,"column":11},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":11}},{"generated":{"line":49,"column":12},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":12},"name":"apply"},{"generated":{"line":49,"column":17},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":17}},{"generated":{"line":49,"column":18},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":18}},{"generated":{"line":49,"column":22},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":22}},{"generated":{"line":49,"column":24},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":24},"name":"Array"},{"generated":{"line":49,"column":29},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":29}},{"generated":{"line":49,"column":30},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":30},"name":"prototype"},{"generated":{"line":49,"column":39},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":39}},{"generated":{"line":49,"column":40},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":40},"name":"slice"},{"generated":{"line":49,"column":45},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":45}},{"generated":{"line":49,"column":46},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":46},"name":"call"},{"generated":{"line":49,"column":50},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":50}},{"generated":{"line":49,"column":51},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":51},"name":"arguments"},{"generated":{"line":49,"column":60},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":60}},{"generated":{"line":49,"column":62},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":62}},{"generated":{"line":49,"column":63},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":63}},{"generated":{"line":49,"column":64},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":64}},{"generated":{"line":49,"column":65},"source":"node_modules/ramda/es/call.js","original":{"line":43,"column":65}},{"generated":{"line":50,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":44,"column":0}},{"generated":{"line":50,"column":1},"source":"node_modules/ramda/es/call.js","original":{"line":44,"column":1}},{"generated":{"line":50,"column":2},"source":"node_modules/ramda/es/call.js","original":{"line":44,"column":2}},{"generated":{"line":51,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":44,"column":3}},{"generated":{"line":51,"column":15},"source":"node_modules/ramda/es/call.js","original":{"line":46,"column":15},"name":"call"},{"generated":{"line":51,"column":19},"source":"node_modules/ramda/es/call.js","original":{"line":46,"column":19}},{"generated":{"line":52,"column":0},"source":"node_modules/ramda/es/call.js","original":{"line":46,"column":19}}],"sources":{"node_modules/ramda/es/call.js":"import _curry1 from \"./internal/_curry1.js\";\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig ((*... -> a), *...) -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(\n *        R.repeat(' '),\n *        R.join(''),\n *        R.replace(/^(?!$)/gm)\n *      );\n *\n *      const format = R.converge(\n *        R.call,\n *        [\n *          R.pipe(R.prop('indent'), indentN),\n *          R.prop('value')\n *        ]\n *      );\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\n\nvar call =\n/*#__PURE__*/\n_curry1(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\n\nexport default call;"},"lineCount":null}},"error":null,"hash":"e442ce289a41b8f38dcc2ccf3318e712","cacheData":{"env":{}}}