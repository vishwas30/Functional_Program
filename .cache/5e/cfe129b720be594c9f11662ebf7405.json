{"id":"node_modules/ramda/es/aperture.js","dependencies":[{"name":"/Users/chiragdev/Documents/Training/JS-Console/package.json","includedInParent":true,"mtime":1669619765108},{"name":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_aperture.js","loc":{"line":1,"column":22,"index":22},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/aperture.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_aperture.js"},{"name":"./internal/_curry2.js","loc":{"line":2,"column":20,"index":69},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/aperture.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_curry2.js"},{"name":"./internal/_dispatchable.js","loc":{"line":3,"column":26,"index":120},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/aperture.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_dispatchable.js"},{"name":"./internal/_xaperture.js","loc":{"line":4,"column":23,"index":174},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/aperture.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_xaperture.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _aperture2 = _interopRequireDefault(require(\"./internal/_aperture.js\"));\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\nvar _dispatchable2 = _interopRequireDefault(require(\"./internal/_dispatchable.js\"));\nvar _xaperture2 = _interopRequireDefault(require(\"./internal/_xaperture.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\n\nvar aperture = /*#__PURE__*/\n(0, _curry.default)( /*#__PURE__*/\n(0, _dispatchable2.default)([], _xaperture2.default, _aperture2.default));\nvar _default = aperture;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":4,"column":50}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":25,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":4},"source":"node_modules/ramda/es/aperture.js","original":{"line":27,"column":4},"name":"aperture"},{"generated":{"line":34,"column":12},"source":"node_modules/ramda/es/aperture.js","original":{"line":27,"column":12}},{"generated":{"line":34,"column":15},"source":"node_modules/ramda/es/aperture.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":29,"column":0}},{"generated":{"line":35,"column":4},"source":"node_modules/ramda/es/aperture.js","original":{"line":29,"column":0},"name":"_curry2"},{"generated":{"line":35,"column":18},"source":"node_modules/ramda/es/aperture.js","original":{"line":29,"column":7}},{"generated":{"line":35,"column":21},"source":"node_modules/ramda/es/aperture.js","original":{"line":30,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":0}},{"generated":{"line":36,"column":4},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":0},"name":"_dispatchable"},{"generated":{"line":36,"column":26},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":13}},{"generated":{"line":36,"column":28},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":14}},{"generated":{"line":36,"column":30},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":16}},{"generated":{"line":36,"column":32},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":18},"name":"_xaperture"},{"generated":{"line":36,"column":51},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":28}},{"generated":{"line":36,"column":53},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":30},"name":"_aperture"},{"generated":{"line":36,"column":71},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":39}},{"generated":{"line":36,"column":72},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":40}},{"generated":{"line":36,"column":73},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":41}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":31,"column":42}},{"generated":{"line":37,"column":15},"source":"node_modules/ramda/es/aperture.js","original":{"line":33,"column":15},"name":"aperture"},{"generated":{"line":37,"column":23},"source":"node_modules/ramda/es/aperture.js","original":{"line":33,"column":23}},{"generated":{"line":38,"column":0},"source":"node_modules/ramda/es/aperture.js","original":{"line":33,"column":23}}],"sources":{"node_modules/ramda/es/aperture.js":"import _aperture from \"./internal/_aperture.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xaperture from \"./internal/_xaperture.js\";\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\n\nvar aperture =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable([], _xaperture, _aperture));\n\nexport default aperture;"},"lineCount":null}},"error":null,"hash":"527cd85fb7d2068484acf5194f1cab3f","cacheData":{"env":{}}}