{"id":"node_modules/ramda/es/binary.js","dependencies":[{"name":"/Users/chiragdev/Documents/Training/JS-Console/package.json","includedInParent":true,"mtime":1669619765108},{"name":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_curry1.js","loc":{"line":1,"column":20,"index":20},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/binary.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_curry1.js"},{"name":"./nAry.js","loc":{"line":2,"column":17,"index":62},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/binary.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/nAry.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\nvar _nAry = _interopRequireDefault(require(\"./nAry.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> ((a, b) -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      const takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      const takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\n\nvar binary = /*#__PURE__*/\n(0, _curry.default)(function binary(fn) {\n  return (0, _nAry.default)(2, fn);\n});\nvar _default = binary;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":2,"column":29}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":25,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":26,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":27,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":28,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":29,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":30,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":4},"source":"node_modules/ramda/es/binary.js","original":{"line":32,"column":4},"name":"binary"},{"generated":{"line":39,"column":10},"source":"node_modules/ramda/es/binary.js","original":{"line":32,"column":10}},{"generated":{"line":39,"column":13},"source":"node_modules/ramda/es/binary.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":0}},{"generated":{"line":40,"column":4},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":0},"name":"_curry1"},{"generated":{"line":40,"column":18},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":7}},{"generated":{"line":40,"column":20},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":8}},{"generated":{"line":40,"column":29},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":17},"name":"binary"},{"generated":{"line":40,"column":35},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":23}},{"generated":{"line":40,"column":36},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":24},"name":"fn"},{"generated":{"line":40,"column":38},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":26}},{"generated":{"line":40,"column":40},"source":"node_modules/ramda/es/binary.js","original":{"line":34,"column":28}},{"generated":{"line":41,"column":2},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":2}},{"generated":{"line":41,"column":9},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":9}},{"generated":{"line":41,"column":13},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":9},"name":"nAry"},{"generated":{"line":41,"column":26},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":13}},{"generated":{"line":41,"column":28},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":14}},{"generated":{"line":41,"column":29},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":15}},{"generated":{"line":41,"column":31},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":17},"name":"fn"},{"generated":{"line":41,"column":33},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":19}},{"generated":{"line":41,"column":34},"source":"node_modules/ramda/es/binary.js","original":{"line":35,"column":20}},{"generated":{"line":42,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":36,"column":0}},{"generated":{"line":42,"column":1},"source":"node_modules/ramda/es/binary.js","original":{"line":36,"column":1}},{"generated":{"line":42,"column":2},"source":"node_modules/ramda/es/binary.js","original":{"line":36,"column":2}},{"generated":{"line":43,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":36,"column":3}},{"generated":{"line":43,"column":15},"source":"node_modules/ramda/es/binary.js","original":{"line":38,"column":15},"name":"binary"},{"generated":{"line":43,"column":21},"source":"node_modules/ramda/es/binary.js","original":{"line":38,"column":21}},{"generated":{"line":44,"column":0},"source":"node_modules/ramda/es/binary.js","original":{"line":38,"column":21}}],"sources":{"node_modules/ramda/es/binary.js":"import _curry1 from \"./internal/_curry1.js\";\nimport nAry from \"./nAry.js\";\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> ((a, b) -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      const takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      const takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\n\nvar binary =\n/*#__PURE__*/\n_curry1(function binary(fn) {\n  return nAry(2, fn);\n});\n\nexport default binary;"},"lineCount":null}},"error":null,"hash":"a8dad06df54571bce9346878feafd63b","cacheData":{"env":{}}}