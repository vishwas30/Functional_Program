{"id":"node_modules/ramda/es/symmetricDifferenceWith.js","dependencies":[{"name":"/Users/chiragdev/Documents/Training/JS-Console/package.json","includedInParent":true,"mtime":1669619765108},{"name":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_curry3.js","loc":{"line":1,"column":20,"index":20},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/symmetricDifferenceWith.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_curry3.js"},{"name":"./concat.js","loc":{"line":2,"column":19,"index":64},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/symmetricDifferenceWith.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/concat.js"},{"name":"./differenceWith.js","loc":{"line":3,"column":27,"index":106},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/symmetricDifferenceWith.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/differenceWith.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3.js\"));\nvar _concat = _interopRequireDefault(require(\"./concat.js\"));\nvar _differenceWith = _interopRequireDefault(require(\"./differenceWith.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      const eqA = R.eqBy(R.prop('a'));\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\n\nvar symmetricDifferenceWith = /*#__PURE__*/\n(0, _curry.default)(function symmetricDifferenceWith(pred, list1, list2) {\n  return (0, _concat.default)((0, _differenceWith.default)(pred, list1, list2), (0, _differenceWith.default)(pred, list2, list1));\n});\nvar _default = symmetricDifferenceWith;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":3,"column":49}},{"generated":{"line":11,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":25,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":4},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":27,"column":4},"name":"symmetricDifferenceWith"},{"generated":{"line":34,"column":27},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":27,"column":27}},{"generated":{"line":34,"column":30},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":0}},{"generated":{"line":35,"column":4},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":0},"name":"_curry3"},{"generated":{"line":35,"column":18},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":7}},{"generated":{"line":35,"column":20},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":8}},{"generated":{"line":35,"column":29},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":17},"name":"symmetricDifferenceWith"},{"generated":{"line":35,"column":52},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":40}},{"generated":{"line":35,"column":53},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":41},"name":"pred"},{"generated":{"line":35,"column":57},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":45}},{"generated":{"line":35,"column":59},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":47},"name":"list1"},{"generated":{"line":35,"column":64},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":52}},{"generated":{"line":35,"column":66},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":54},"name":"list2"},{"generated":{"line":35,"column":71},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":59}},{"generated":{"line":35,"column":73},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":29,"column":61}},{"generated":{"line":36,"column":2},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":2}},{"generated":{"line":36,"column":9},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":9}},{"generated":{"line":36,"column":13},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":9},"name":"concat"},{"generated":{"line":36,"column":28},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":15}},{"generated":{"line":36,"column":30},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":16}},{"generated":{"line":36,"column":34},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":16},"name":"differenceWith"},{"generated":{"line":36,"column":57},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":30}},{"generated":{"line":36,"column":59},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":31},"name":"pred"},{"generated":{"line":36,"column":63},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":35}},{"generated":{"line":36,"column":65},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":37},"name":"list1"},{"generated":{"line":36,"column":70},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":42}},{"generated":{"line":36,"column":72},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":44},"name":"list2"},{"generated":{"line":36,"column":77},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":49}},{"generated":{"line":36,"column":78},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":50}},{"generated":{"line":36,"column":80},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":52}},{"generated":{"line":36,"column":84},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":52},"name":"differenceWith"},{"generated":{"line":36,"column":107},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":66}},{"generated":{"line":36,"column":109},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":67},"name":"pred"},{"generated":{"line":36,"column":113},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":71}},{"generated":{"line":36,"column":115},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":73},"name":"list2"},{"generated":{"line":36,"column":120},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":78}},{"generated":{"line":36,"column":122},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":80},"name":"list1"},{"generated":{"line":36,"column":127},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":85}},{"generated":{"line":36,"column":128},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":86}},{"generated":{"line":36,"column":129},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":30,"column":87}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":31,"column":0}},{"generated":{"line":37,"column":1},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":31,"column":1}},{"generated":{"line":37,"column":2},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":31,"column":2}},{"generated":{"line":38,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":31,"column":3}},{"generated":{"line":38,"column":15},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":33,"column":15},"name":"symmetricDifferenceWith"},{"generated":{"line":38,"column":38},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":33,"column":38}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/symmetricDifferenceWith.js","original":{"line":33,"column":38}}],"sources":{"node_modules/ramda/es/symmetricDifferenceWith.js":"import _curry3 from \"./internal/_curry3.js\";\nimport concat from \"./concat.js\";\nimport differenceWith from \"./differenceWith.js\";\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      const eqA = R.eqBy(R.prop('a'));\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\n\nvar symmetricDifferenceWith =\n/*#__PURE__*/\n_curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\n\nexport default symmetricDifferenceWith;"},"lineCount":null}},"error":null,"hash":"001c253e5d494e3c00099cc0d802ba98","cacheData":{"env":{}}}