{"id":"node_modules/ramda/es/internal/_assertPromise.js","dependencies":[{"name":"/Users/chiragdev/Documents/Training/JS-Console/package.json","includedInParent":true,"mtime":1669619765108},{"name":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/package.json","includedInParent":true,"mtime":499162500000},{"name":"./_isFunction.js","loc":{"line":1,"column":24,"index":24},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_assertPromise.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_isFunction.js"},{"name":"./_toString.js","loc":{"line":2,"column":22,"index":66},"parent":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_assertPromise.js","resolved":"/Users/chiragdev/Documents/Training/JS-Console/node_modules/ramda/es/internal/_toString.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _assertPromise;\nvar _isFunction2 = _interopRequireDefault(require(\"./_isFunction.js\"));\nvar _toString2 = _interopRequireDefault(require(\"./_toString.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _assertPromise(name, p) {\n  if (p == null || !(0, _isFunction2.default)(p.then)) {\n    throw new TypeError('`' + name + '` expected a Promise, received ' + (0, _toString2.default)(p, []));\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":2,"column":39}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":15}},{"generated":{"line":10,"column":9},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":24},"name":"_assertPromise"},{"generated":{"line":10,"column":23},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":38}},{"generated":{"line":10,"column":24},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":39},"name":"name"},{"generated":{"line":10,"column":28},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":43}},{"generated":{"line":10,"column":30},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":45},"name":"p"},{"generated":{"line":10,"column":31},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":46}},{"generated":{"line":10,"column":33},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":3,"column":48}},{"generated":{"line":11,"column":2},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":2}},{"generated":{"line":11,"column":6},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":6},"name":"p"},{"generated":{"line":11,"column":7},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":7}},{"generated":{"line":11,"column":11},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":11}},{"generated":{"line":11,"column":15},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":15}},{"generated":{"line":11,"column":19},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":19}},{"generated":{"line":11,"column":20},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":20}},{"generated":{"line":11,"column":24},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":20},"name":"_isFunction"},{"generated":{"line":11,"column":44},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":31}},{"generated":{"line":11,"column":46},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":32},"name":"p"},{"generated":{"line":11,"column":47},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":33}},{"generated":{"line":11,"column":48},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":34},"name":"then"},{"generated":{"line":11,"column":52},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":38}},{"generated":{"line":11,"column":53},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":39}},{"generated":{"line":11,"column":55},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":4,"column":41}},{"generated":{"line":12,"column":4},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":4}},{"generated":{"line":12,"column":10},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":10}},{"generated":{"line":12,"column":14},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":14},"name":"TypeError"},{"generated":{"line":12,"column":23},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":23}},{"generated":{"line":12,"column":24},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":24}},{"generated":{"line":12,"column":27},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":27}},{"generated":{"line":12,"column":30},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":30},"name":"name"},{"generated":{"line":12,"column":34},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":34}},{"generated":{"line":12,"column":37},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":37}},{"generated":{"line":12,"column":70},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":70}},{"generated":{"line":12,"column":73},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":73}},{"generated":{"line":12,"column":77},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":73},"name":"_toString"},{"generated":{"line":12,"column":95},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":82}},{"generated":{"line":12,"column":97},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":83},"name":"p"},{"generated":{"line":12,"column":98},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":84}},{"generated":{"line":12,"column":100},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":86}},{"generated":{"line":12,"column":102},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":88}},{"generated":{"line":12,"column":103},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":89}},{"generated":{"line":12,"column":104},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":5,"column":90}},{"generated":{"line":13,"column":2},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":6,"column":2}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/internal/_assertPromise.js","original":{"line":7,"column":0}}],"sources":{"node_modules/ramda/es/internal/_assertPromise.js":"import _isFunction from \"./_isFunction.js\";\nimport _toString from \"./_toString.js\";\nexport default function _assertPromise(name, p) {\n  if (p == null || !_isFunction(p.then)) {\n    throw new TypeError('`' + name + '` expected a Promise, received ' + _toString(p, []));\n  }\n}"},"lineCount":null}},"error":null,"hash":"59d7c4f64daa507152505e5926c486de","cacheData":{"env":{}}}